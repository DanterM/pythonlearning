# 函数的参数
# 定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。
# 对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。
#
# Python的函数定义非常简单，但灵活度却非常大。
# 除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。

# 位置参数

# 我们先写一个计算x2的函数：

def power(x):
    return x * x
# 对于power(x)函数，参数x就是一个位置参数。

# 当我们调用power函数时，必须传入有且仅有的一个参数x：

power(5)
power(15)
# 现在，如果我们要计算x3怎么办？可以再定义一个power3函数，但是如果要计算x4、x5……怎么办？我们不可能定义无限多个函数。

# 你也许想到了，可以把power(x)修改为power(x, n)，用来计算xn，说干就干：

def power(x, n):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
# 对于这个修改后的power(x, n)函数，可以计算任意n次方：

power(5, 2)
power(5, 3)


# 修改后的power(x, n)函数有两个参数：x和n，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数x和n。






# 默认参数

# 新的power(x, n)函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：

# power(5)
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
# TypeError: power() missing 1 required positional argument: 'n'
# Python的错误信息很明确：调用函数power()缺少了一个位置参数n。

# 这个时候，默认参数就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：

def power(x, n=2):
    s = 1
    while n > 0:
        n = n - 1
        s = s * x
    return s
# 这样，当我们调用power(5)时，相当于调用power(5, 2)：

power(5)
power(5, 2)

# 而对于n > 2的其他情况，就必须明确地传入n，比如power(5, 3)。

# 从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：

# 一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；

# 二是如何设置默认参数。

# 当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。

# 使用默认参数有什么好处？最大的好处是能降低调用函数的难度。

# 举个例子，我们写个一年级小学生注册的函数，需要传入name和gender两个参数：

def enroll(name, gender):
    print('name:', name)
    print('gender:', gender)
# 这样，调用enroll()函数只需要传入两个参数：

# >>> enroll('Sarah', 'F')
# name: Sarah
# gender: F
# 如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。

# 我们可以把年龄和城市设为默认参数：

def enroll(name, gender, age=6, city='Beijing'):
    print('name:', name)
    print('gender:', gender)
    print('age:', age)
    print('city:', city)
# 这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：

# >>> enroll('Sarah', 'F')
# name: Sarah
# gender: F
# age: 6
# city: Beijing
# 只有与默认参数不符的学生才需要提供额外的信息：

enroll('Bob', 'M', 7)
enroll('Adam', 'M', city='Tianjin')
# 可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。
#
# 有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用enroll('Bob', 'M', 7)，意思是，除了name，gender这两个参数外，最后1个参数应用在参数age上，city参数由于没有提供，仍然使用默认值。
#
# 也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，意思是，city参数用传进去的值，其他默认参数继续使用默认值。
#
# 默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：
#
# 先定义一个函数，传入一个list，添加一个END再返回：

